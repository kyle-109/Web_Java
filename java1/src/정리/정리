Day1: 출력
Day2: 자료형, 변수
Day3: 연산자, scanner/입력객체, 제어문
Day4: 제어문[키오스크]
Day5: 반복문[별찍기]
Day6: switch, while, 1차원 배열
Day7: 2차원 배열[로또 판별기, 회원제 프로그램]
Day8: 클래스

[[[클래스]]]

	System 클래스
		1. System.out : 출력장치
			System.out.println()
			System.out.print()
			System.out.printf()
			
		2. System.in : 입력장치
			
			
	*String 클래스: 문자열을 저장하는 객체
		* 바이트 => 문자열
		* 메소드
			1. 문자 추출[charAt()]
			2. 문자열 비교[equals()]
			3. 문자열 ---> 바이트배열[getBytes()]
			4. 문자열 찾기 [indexOf()]
			5. 문자열 길이[length() ] 반환 : 문자수(공백포함)
			6. 문자열 잘라내기[ substring() ] : 인덱스[위치] 기준
			7. 문자열 분해[ split() ] : 문자 기준
			8. 문자열 치환[replace("교체할 문자", "새로운 문자")]
			9. 대소문자 변환[toLowerCase(): 소문자변환/toUpperCase(): 대문자변환]
			10. 공백 제거[trim()] :앞뒤 공백만 제거
			11. 문자열 변환[valueOf()]
			
	*Scanner 클래스
		키보드 입력받는 객체
		Scanner 객체명 = new Scanner(System.in)
		1. .nextInt(): 객체에서 정수 빼오기
		2. .next(): 객체에서 문자열 빼오기(공백을 기준으로 공백앞까지)
		3. .nextLine() :객체에서 문자열 빼오기(공백을 포함해서 전부 빼오기)
	
	* Random 클래스
		난수 생성 객체
		// 랜덤객체.nextInt(); int 범위내 난수 생성 +-20억.
		// 랜덤객체.nextInt(수); 0부터 넣은 수 전까지의 난수 생성
		// 랜덤객체.nextInt(수)+시작; 시작부터 수+시작전까지 난수 생성


[[[문법]]]
	*변수/객체 : 메모리 할당받은 공간
		1. 변수 : 자료형 기반 메모리할당 new를 할 필요가 없다.
		2. 객체 : 클래스 기반 메모리할당 new를 사용. 
			설계기반으로 객체를 만들때 메모리가 들어가고, 메모리가 가변적이다.
			String은 new를 써도 되고, 안 써도 된다.
			
	1. 형식 문자:
			%d: 정수
			%f: 실수
			%s: 문자열
			%c: 문자
		제어문자 :
			\n은 줄바꿈
			\t는 들여쓰기 5칸씩
			\r은 다음 줄의 첫칸으로 이동
			\\, \", \' 숙지		

	1. 자료형(미리 정해진 메모리)
		* 형변환
			1. 자동형변환: 작은 메모리 => 큰메모리
			2. 강제형변환: (새로운 자료형/클래스명)변수/객체
				* 데이터 손실
		1. boolean : 1bit => true/false
		2. char : 2byte => 한글자
		3. String : 클래스, 용량 가변, 문자열
		4. byte : 1byte, 정수
		5. short : 2byte, 정수
		6. int : 4byte, 정수 [기본]
		7. long : 8byte, 정수
		8. float : 4byte, 실수
		9. double : 8byte, 실수 [기본]
		
	2. 연산자
	
	3. 제어문
	
	4. 반복문
	
	5. 배열
	
	
메모리 관리방법
		1. 주기억장치
			*실행중인 프로그램 메모리관리
			*휘발성메모리(전기x저장x)
			*변수
		2. 보조기억장치
			*비휘발성 메모리(전기x저장o)
			*파일처리, DB
데이터베이스
	1. DB: 체계화해 통합, 관리하는 데이터의 집합
	2. SQL: 질의어
		1. 설치
		MySQL Installer for windows	
			450.7M
		Connector/J
			platform independent
			zipfile
		2. java와 DB 연동하기
			1. 프로젝트에 라이브러리 추가
			2. module-info.java에 requires java.sql; opens 패키지명 to java.sql;
			3. MySQL workbench에 create sql하고 생긴 sql에 create database DB명
			4. DAO
				// 1. 해당 드라이브(DB회사별로 드라이브이름 다름) 가져오기
				Class.forName("com.mysql.cj.jdbc.Drvier");
				// 2. DB URL 연결[Connection 인터페이스: DB 연결해주는 인터페이스]
				Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/javafx?serverTime=UTC", "root", "1234");
														//URL "jdbc:mysql://ip주소:포트번호/DB명?DB시간설정, "계정명", "비밀번호") 
		3. SQL 질의어
			[ DDL : 정의어 ] 
			1. create database DB명: [DB]저장소 만들기
			2. create table DB명.테이블명(필드명1 자료형 속성, 필드명2 자료형 속성 ~~ ) : 해당 저장소[DB] 표[TABLE] 만들기
			3. drop databse DB명: DB삭제
			
			[속성]
				1. primary key: 기본키
				2. auto_increment: 자동번호 부여
				3. not null : null 제외
				4. datetime : 8바이트 날짜/시간 자료형
				5. current_timestamp: 생성시간 기록
				
			[자료형]
				1. varchar(문자길이): 문자열 자료형
				2. int: 4바이트 정수형
			
			
			[ DML : 조작어 ]
			1. insert : 해당 테이블의 데이터 추가
					INSERT into 테이블명(필드1, 필드2, 필드3 ~~~ ) values(값1, 값2, 값3 ~~)
					*만약에 모든 필드에 삽입할경우
					INSERT into 테이블명 values(값1, 값2, 값3 ~~)
			
			2. select : 해당 테이블에서 필드 검색
					SELECT 필드 FROM 테이블명 (WHERE 조건)
					*만약에 모든 필드를 검색할 경우
					SELECT * FROM 테이블명 (WHERE 조건)
			
			3. delete : 해당테이블의 레코드 삭제
				delete from 테이블명 where 조건 ->조건 없으면 전체 삭제
				
			4. update : 해당테이블의 레코드 수정	
				update 테이블명 set 필드=변경할값1, 필드2=변경할값2 where 조건	
			
			*[ 속성 ] 
				1. where 필드 = 값
			*[ 연산자 ]	
				1. and / or 	이면서 / 또는
						where 필드1 = 값1 and 필드2 = 값2
				
		4. DB 용어
				필드(열,속성): 세로 단위
				레코드(행, 튜플): 가로 단위
				 