Day1: 출력
Day2: 자료형, 변수
Day3: 연산자, scanner/입력객체, 제어문
Day4: 제어문[키오스크]
Day5: 반복문[별찍기]
Day6: switch, while, 1차원 배열
Day7: 2차원 배열[로또 판별기, 회원제 프로그램]


[[[클래스]]]

	System 클래스
		1. System.out : 출력장치
			System.out.println()
			System.out.print()
			System.out.printf()
			
		2. System.in : 입력장치
			
			
	*String 클래스: 문자열을 저장하는 객체
		* 바이트 => 문자열
		* 메소드
			1. 문자 추출[charAt()]
			2. 문자열 비교[equals()]
			3. 문자열 ---> 바이트배열[getBytes()]
			4. 문자열 찾기 [indexOf()]
			5. 문자열 길이[length() ] 반환 : 문자수(공백포함)
			6. 문자열 잘라내기[ substring() ] : 인덱스[위치] 기준
			7. 문자열 분해[ split() ] : 문자 기준
			8. 문자열 치환[replace("교체할 문자", "새로운 문자")]
			9. 대소문자 변환[toLowerCase(): 소문자변환/toUpperCase(): 대문자변환]
			10. 공백 제거[trim()] :앞뒤 공백만 제거
			11. 문자열 변환[valueOf()]
			
	*Scanner 클래스
		키보드 입력받는 객체
		Scanner 객체명 = new Scanner(System.in)
		1. .nextInt(): 객체에서 정수 빼오기
		2. .next(): 객체에서 문자열 빼오기(공백을 기준으로 공백앞까지)
		3. .nextLine() :객체에서 문자열 빼오기(공백을 포함해서 전부 빼오기)
	
	* Random 클래스
		난수 생성 객체
		// 랜덤객체.nextInt(); int 범위내 난수 생성 +-20억.
		// 랜덤객체.nextInt(수); 0부터 넣은 수 전까지의 난수 생성
		// 랜덤객체.nextInt(수)+시작; 시작부터 수+시작전까지 난수 생성


[[[문법]]]
	*변수/객체 : 메모리 할당받은 공간
		1. 변수 : 자료형 기반 메모리할당 new를 할 필요가 없다.
		2. 객체 : 클래스 기반 메모리할당 new를 사용. 
			설계기반으로 객체를 만들때 메모리가 들어가고, 메모리가 가변적이다.
			String은 new를 써도 되고, 안 써도 된다.
			
	1. 형식 문자:
			%d: 정수
			%f: 실수
			%s: 문자열
			%c: 문자
		제어문자 :
			\n은 줄바꿈
			\t는 들여쓰기 5칸씩
			\r은 다음 줄의 첫칸으로 이동
			\\, \", \' 숙지		

	1. 자료형(미리 정해진 메모리)
		* 형변환
			1. 자동형변환: 작은 메모리 => 큰메모리
			2. 강제형변환: (새로운 자료형/클래스명)변수/객체
				* 데이터 손실
		1. boolean : 1bit => true/false
		2. char : 2byte => 한글자
		3. String : 클래스, 용량 가변, 문자열
		4. byte : 1byte, 정수
		5. short : 2byte, 정수
		6. int : 4byte, 정수 [기본]
		7. long : 8byte, 정수
		8. float : 4byte, 실수
		9. double : 8byte, 실수 [기본]
		
	2. 연산자
	
	3. 제어문
	
	4. 반복문
	
	5. 배열
		